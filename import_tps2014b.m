function data = import_tps2014b (filename)

% import_tps2014b             import a .csv file generated by the oscilloscope TPS 2014-B
% 
% Description:
% -----------
% This function imports a .csv data file generated by the oscilloscope TDS 2014-B.
% Data are exported to a data structure. An array of data structures is returned (one for each channel).
% If no file name is provided, the function asks directly to the user to select the .csv file to
% import.
% If no output argument is provided, data are plotted into a new figure.
%
% The data structure is composed as follows:
% .Info  : data structure containing the information in the header of the file
% .time  : column vector containing the sampling times
% .value : column vector containing the measured values
%
% The structure Info is composed of:
% .length   : number of samples
% .period   : sampling period
% .trigger  : ?
% .source   : name of the channel
% .vunit    : measurement unit on the vertical axis
% .vscale   : scale of the vertical axis
% .voffset  : vertical offset
% .hunit    : measurement unit on the horizontal axis
% .hscale   : scale of the horizontal axis
% .ptfmt    : ?
% .yzero    : ?
% .probe    : ?
% .note     : generic information provided by the oscilloscope
%
%
% Input:
% - filename                  .csv file name (optional)
%
% Output:                     
% - data(n)                   Array of n data structures                           
%
% Notes:                      
%
% Example:                    
%
% See also: plot_tps2014b()                  
%
% References:                 
%
% Validation:                 
%
% 13-Sep-2022 - First version.

% --------------------------->| description of the function ---|------------------------------------------->| remarks

% If no input file is provided, ask to the user
if nargin == 0
  [fname, fpath] = uigetfile('*.csv', 'Select a TDS 2014 B .csv file');
  filename = [ fpath fname ];
end

% Open the file, and emit an error if it cannot be opened
fid = fopen(filename, 'r');
if fid == -1
  throw(ME('FileError', sprintf('The file "%s" cannot be opened', filename)));
end

% Determine the number of channels
buffer = fgetl(fid);
ind = strfind(buffer, 'Record Length');
nbChannels = numel(ind);

% Import the data of each channel
% First, read the whole header and allocate the info structure
buffer = { buffer };
for n = 2 : 17
  buffer{n} = fgetl(fid);
end

info_ = struct('length', [], 'period', [], 'trigger', [], 'source', [], ...
  'vunit', [], 'vscale', [], 'voffset', [], 'hunit', [], 'hscale', [], ...
  'ptfmt', [], 'yzero', [], 'probe', [], 'note', []);

% Now, extract the information for each channel
for n = 1 : nbChannels
  base = 6*(n-1);
  for k = 1 : 17
    str = buffer{k};
    ind = find(str == ',');
    assert(numel(ind) == 6*nbChannels-1, '*** wrong number of comas ***');
    str = str(ind(base+1)+1:ind(base+2)-1);
    switch k
      case 1
        info_.length = str2num(str);
      case 2
        info_.period = str2num(str);
      case 3
        info_.trigger = str2num(str);
      case {4, 5, 6}
        % Nothing to do
      case 7
        info_.source = str;
      case 8
        info_.vunit = str;
      case 9
        info_.vscale = str;
      case 10
        info_.voffset = str2num(str);
      case 11
        info_.hunit = str;
      case 12
        info_.hscale = str2num(str);
      case 13
        info_.ptfmt = str;
      case 14
        info_.yzero = str2num(str);
      case 15
        info_.probe = str2num(str);
      case 16
        % Nothing to do
      case 17
        info_.note = str;
      otherwise
        error('*** This should never happen ***');
    end
  end
  data(n).Info = info_;
end

% Rewind the file and read the data for each channel
for n = 1 : nbChannels
  fseek(fid, 0, 'bof');
  base = 6*(n-1);
  nbSamples = data(n).Info.length;
  assert(nbSamples > 0, '*** number of samples must be positive ***');
  data(n).time  = zeros(nbSamples, 1);
  data(n).value = zeros(nbSamples, 1);
  for k = 1 : nbSamples
    str = fgetl(fid);
    ind = find(str == ',');
    str = str(ind(base+3)+1:ind(base+5)-1);
    [tmp_, n_] = sscanf(str, '%f,%f');
    assert(n_ == 2, '*** wrong data line ***');
    data(n).time(k)  = tmp_(1);
    data(n).value(k) = tmp_(2);
  end
end

% Close the file and exit
fclose(fid);

% If no output argument is required, plot data in a new figure
if nargout == 0
  plot_tps2014b(data);
end
end


